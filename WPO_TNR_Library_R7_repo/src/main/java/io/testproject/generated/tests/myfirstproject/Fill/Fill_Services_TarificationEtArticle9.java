package io.testproject.generated.tests.myfirstproject;

import io.testproject.java.annotations.v2.Parameter;
import io.testproject.java.annotations.v2.Test;
import io.testproject.java.enums.ParameterDirection;
import io.testproject.java.enums.TakeScreenshotConditionType;
import io.testproject.java.sdk.v2.drivers.WebDriver;
import io.testproject.java.sdk.v2.enums.ExecutionResult;
import io.testproject.java.sdk.v2.exceptions.FailureException;
import io.testproject.java.sdk.v2.reporters.TestReporter;
import io.testproject.java.sdk.v2.tests.WebTest;
import io.testproject.java.sdk.v2.tests.helpers.WebTestHelper;
import io.testproject.proxy.addon.WebExtensions;
import io.testproject.proxy.addon.io.testproject.addons.web.element.select.SelectOptionbyVisibleText;
import jdk.internal.loader.Resource;

import org.openqa.selenium.By;
import org.openqa.selenium.Alert;

import java.io.* ;

/**
 * This class was automatically generated by TestProject
 * Project: My first Project
 * Test: TariffFiller
 * Generated by: C ANNICCHIARICO (come.annicchiarico@gireve.com)
 * Generated on Wed Aug 05 13:28:38 GMT 2020.
 */
@Test(
    name = "Fill_Services_TarificationEtArticle9",
    description = "This test was auto generated from steps of the 'FillOutOffer_WifiService' test",
    version = "1.0"
)
public class Fill_Services_TarificationEtArticle9 implements WebTest {
      @Parameter(
        description = "Tarification dans l'article 9 ? [o/n]",
        defaultValue = "n",
        direction = ParameterDirection.INPUT
    )
    public String article9Tariff;

    @Parameter(
        description = "Service gratuit ? [o/n]",
        defaultValue = "n",
        direction = ParameterDirection.INPUT
    )
    public String serviceGratuit;

    @Parameter(
        description = "Session prix mini ? [o/n]",
        defaultValue = "n",
        direction = ParameterDirection.INPUT
    )
    public String hasMaximumPrice;

    @Parameter(
        description = "Session prix maxi ? [o/n]",
        defaultValue = "n",
        direction = ParameterDirection.INPUT
    )
    public String hasMinimumPrice;

    @Parameter(
        description = "Dépends du Créneau [o/n]",
        defaultValue = "n",
        direction = ParameterDirection.INPUT
    )
    public String dependsOnCreneau;

  @Parameter(
      description = "PrixDeBase",
      defaultValue = "0",
      direction = ParameterDirection.INPUT
  )
  public String BasePrice;

  @Parameter(
    description = "ValeurParamDePrix",
    defaultValue = "0",
    direction = ParameterDirection.INPUT
  )
  public String BaseParam;

  @Parameter(
      description = "IndiceParamDePrix",
      defaultValue = "1",
      direction = ParameterDirection.INPUT
  )
  public String iBaseParam;


    @Parameter(
      description = "Devise",
      defaultValue = "EUR",
      direction = ParameterDirection.INPUT
  )
  public String Devise;

  @Parameter(
      description = "IndicePrecisionPrix",
      defaultValue = "1",
      direction = ParameterDirection.INPUT
  )
  public String iPrecPrice;

  @Parameter(
      description = "IndicePrecisionTemps",
      defaultValue = "1",
      direction = ParameterDirection.INPUT
  )
  public String iPrecTime;

  @Parameter(
    description = "LimiterTarif [o/n]",
    defaultValue = "o",
    direction = ParameterDirection.INPUT
  )
  public String boolLimitTariff;

  @Parameter(
    description = "Indice de comparateur de paramètre 0",
    defaultValue = "1",
    direction = ParameterDirection.INPUT
  )
  public String idParamSelectorPowers0;

  @Parameter(
    description = "Indice de comparateur de paramètre 1",
    defaultValue = "1",
    direction = ParameterDirection.INPUT
  )
  public String idParamSelectorPowers1;

  @Parameter(
    description = "Valeur de paramètre puissance 0",
    defaultValue = "0",
    direction = ParameterDirection.INPUT
  )
  public String valueParamPowers0;

  @Parameter(
    description = "Valeur de paramètre puissance 1",
    defaultValue = "0",
    direction = ParameterDirection.INPUT
  )
  public String valueParamPowers1;

  @Parameter(
    description = "Valeur de paramètre intervalle de temps 0",
    defaultValue = "0",
    direction = ParameterDirection.INPUT
  )
  public String valueParamTime0;

  @Parameter(
    description = "Valeur de paramètre intervalle de temps 1",
    defaultValue = "0",
    direction = ParameterDirection.INPUT
  )
  public String valueParamTime1;

  @Parameter(
    description = "CompleterTarif [o/n]",
    defaultValue = "o",
    direction = ParameterDirection.INPUT
  )
  public String completeTariff;

  @Parameter(
      description = "Valeur de la lmite du Tariff",
      defaultValue = "1",
      direction = ParameterDirection.INPUT
  )
  public String limitTariffValue;

  @Parameter(
    description = "Minimum session HT",
    defaultValue = "0",
    direction = ParameterDirection.INPUT
  )
  public String minAmountSession;

  @Parameter(
      description = "Maximum session HT",
      defaultValue = "0",
      direction = ParameterDirection.INPUT
  )
  public String maxAmountSession;


  @Parameter(
    description = "Jours de la semaine valides",
    defaultValue = "Lun,Mar,Mer,Jeu,Ven,Sam,Dim",
    direction = ParameterDirection.INPUT
  )
  public String inputDays;

  @Parameter(
    description = "Heure de début Matin",
    defaultValue = "00h00",
    direction = ParameterDirection.INPUT
  )
  public String hourMorningStart;

  @Parameter(
    description = "Heure de fin Matin",
    defaultValue = "12h00",
    direction = ParameterDirection.INPUT
  )
  public String hourMorningEnd;

  @Parameter(
    description = "Heure de début après-midi",
    defaultValue = "12h00",
    direction = ParameterDirection.INPUT
  )
  public String hourAfternoonStart;

  @Parameter(
    description = "Heure de fin après-midi",
    defaultValue = "24h00",
    direction = ParameterDirection.INPUT
  )
  public String hourAfternoonEnd;

  @Parameter(
    description = "Environnement",
    defaultValue = "R7",
    direction = ParameterDirection.INPUT
  )
  public String ENVIRONNEMENT;

  public ExecutionResult execute(WebTestHelper helper) throws FailureException {
    WebDriver driver = helper.getDriver();
    // set timeout for driver actions (similar to step timeout)
    driver.setTimeout(15000);
    TestReporter report = helper.getReporter();
    By by;
    boolean booleanResult;
    ExecutionResult executionresult;
    SelectOptionbyVisibleText selectOptionbyVisibleText;

    if (article9Tariff.equals("o")) {
      // 13. Click 'Article 9'
      by = By.xpath("/html/body/div[2]/div/div/form/div[1]/div[1]/div[1]/div/div[3]/div[2]/div/label/i");
      booleanResult = driver.testproject().click(by);
      report.step("Click 'Service Gratuit'", booleanResult, TakeScreenshotConditionType.Never);

      // 2. Dismiss alert message
      try {
        Thread.sleep(5000);
      } catch (Exception e){}
      Alert alert = driver.switchTo().alert();
      alert.accept();
      report.step("Dismiss Alert", booleanResult, TakeScreenshotConditionType.Never);
    } else {
      Fill_Services_Tarification a = new Fill_Services_Tarification();
      a.serviceGratuit = serviceGratuit;
      a.hasMaximumPrice = hasMaximumPrice;
      a.hasMinimumPrice = hasMinimumPrice;
      a.dependsOnCreneau=dependsOnCreneau;
      a.elementAddress="pricing_0";
      a.BasePrice=BasePrice ;
      a.BaseParam=BaseParam ;
      a.iBaseParam=iBaseParam;
      a.Devise=Devise;
      a.iPrecPrice=iPrecPrice;
      a.iPrecTime=iPrecTime;
      a.boolLimitTariff=boolLimitTariff;
      a.idParamSelectorPowers0=idParamSelectorPowers0;
      a.idParamSelectorPowers1=idParamSelectorPowers1;
      a.valueParamPowers0=valueParamPowers0;
      a.valueParamPowers1=valueParamPowers1;
      a.valueParamTime0=valueParamTime0;
      a.valueParamTime1=valueParamTime1;
      a.completeTariff=completeTariff;
      a.limitTariffValue=limitTariffValue;
      a.minAmountSession=minAmountSession;
      a.maxAmountSession=maxAmountSession;
      a.inputDays=inputDays;
      a.hourMorningStart=hourMorningStart;
      a.hourMorningEnd=hourMorningEnd;
      a.hourAfternoonStart=hourAfternoonStart;
      a.hourAfternoonEnd=hourAfternoonEnd ;
      a.ENVIRONNEMENT = ENVIRONNEMENT;

      executionresult = a.execute(helper);
      report.step("Fill Tarification", executionresult == ExecutionResult.PASSED, TakeScreenshotConditionType.Never);

    }
    return ExecutionResult.PASSED;  
  }




}
